<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/8/31 0031
 * Time: 上午 10:09
 */

namespace app\admin\controller;


use app\admin\model\RecommendBlockModel;
use app\portal\controller\AdminArticleController;
use cmf\controller\AdminBaseController;
use app\portal\model\PortalCategoryModel;
use think\Exception;
use tree\Tree;
use app\admin\model\RouteModel;
use app\portal\model\PortalPostModel;
use app\admin\model\BannerModel;
use think\Db;
class NewsController extends AdminBaseController
{
    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->parentId = 11;
    }

    public function index()
    {
        $portalCategoryModel = new PortalCategoryModel();
        $where = ['delete_time' => 0,'path'=>['Like','0-'.$this->parentId.'%']];
        $categories = $portalCategoryModel->order("list_order ASC")->where($where)->select()->toArray();

        $tree       = new Tree();
        $tree->icon = ['&nbsp;&nbsp;│', '&nbsp;&nbsp;├─', '&nbsp;&nbsp;└─'];
        $tree->nbsp = '&nbsp;&nbsp;';

        $newCategories = [];
        foreach ($categories as $item) {
            $item['url']     = url('News/newsList', ['cid' => $item['id']]);;
            $item['str_action'] = '<a href="' . url("News/newsList", ["cid" => $item['id']]) . '">查看</a> <a href="' . url("News/edit", ["id" => $item['id']]) . '">' . lang('EDIT') . '</a>  <a class="js-ajax-delete" href="' . url("News/delete", ["id" => $item['id']]) . '">' . lang('DELETE') . '</a> ';
            array_push($newCategories, $item);
        }

        $tree->init($newCategories);

        $tpl = "<tr>
                    <td><input name='list_orders[\$id]' type='text' size='3' value='\$list_order' class='input-order'></td>
                    <td>\$id</td>
                    <td>\$spacer <a href='\$url'>\$name</a></td>
                    <td>\$description</td>
                    <td>\$str_action</td>
                </tr>";
        $treeStr = $tree->getTree($this->parentId, $tpl);

        $this->assign('category_tree', $treeStr);
        return $this->fetch();
    }

    /*
     * 新闻资讯添加
     */
    public function add()
    {
        $portalCategoryModel = new PortalCategoryModel();
        $where = ['delete_time' => 0,'path'=>['Like','0-'.$this->parentId.'%']];
        $categories = $portalCategoryModel->order("list_order ASC")->where($where)->select()->toArray();
        $tree       = new Tree();
        $tree->icon = ['&nbsp;&nbsp;│', '&nbsp;&nbsp;├─', '&nbsp;&nbsp;└─'];
        $tree->nbsp = '&nbsp;&nbsp;';

        $newCategories = [];
        foreach ($categories as $item) {
            $item['selected'] = $this->parentId == $item['id'] ? "selected" : "";
            array_push($newCategories, $item);
        }

        $tree->init($newCategories);
        $str     = '<option value=\"{$id}\" {$selected}>{$spacer}{$name}</option>';
        $treeStr = $tree->getTree(0, $str);
        $this->assign('categories_tree', $treeStr);
        $this->assign('parentId', $this->parentId);
        return $this->fetch();
    }

    /*
     * 新闻资讯添加保存
     */
    public function addPost()
    {
        $portalCategoryModel = new PortalCategoryModel();

        $data = $this->request->param();

        $result = $this->validate($data, 'PortalCategory');

        if ($result !== true) {
            $this->error($result);
        }

        $result = $portalCategoryModel->addCategory($data);

        if ($result === false) {
            $this->error('添加失败!');
        }

        $this->success('添加成功!', url('News/index'));
    }

    /*
     * 新闻资讯编辑
     */
    public function edit()
    {
        $id = $this->request->param('id/d',0,'intval');
        if ($id > 0) {
            $category = PortalCategoryModel::get($id)->toArray();
            $portalCategoryModel = new PortalCategoryModel();
            $where = ['delete_time' => 0,'path'=>['Like','0-'.$this->parentId.'%']];
            $categories = $portalCategoryModel->order("list_order ASC")->where($where)->select()->toArray();
            $tree       = new Tree();
            $tree->icon = ['&nbsp;&nbsp;│', '&nbsp;&nbsp;├─', '&nbsp;&nbsp;└─'];
            $tree->nbsp = '&nbsp;&nbsp;';

            $newCategories = [];
            foreach ($categories as $item) {
                $item['selected'] = $category['parent_id'] == $item['id'] ? "selected" : "";
                array_push($newCategories, $item);
            }
            $routeModel = new RouteModel();
            $alias      = $routeModel->getUrl('', ['id' => $id]);

            $category['alias'] = $alias;
            $tree->init($newCategories);
            $str     = '<option value=\"{$id}\" {$selected}>{$spacer}{$name}</option>';
            $treeStr = $tree->getTree(0, $str);

            $this->assign($category);
            $this->assign('categories_tree', $treeStr);
            $this->assign('parentId', $this->parentId);
            return $this->fetch();
        } else {
            $this->error('操作错误!');
        }
    }

    /*
     * 新闻资讯编辑保存
     */
    public function editPost()
    {
        $data = $this->request->param();

        $result = $this->validate($data, 'PortalCategory');

        if ($result !== true) {
            $this->error($result);
        }

        $portalCategoryModel = new PortalCategoryModel();

        $result = $portalCategoryModel->editCategory($data);

        if ($result === false) {
            $this->error('保存失败!');
        }

        $this->success('保存成功!');
    }

    /*
     * 新闻资讯删除
     */
    public function delete()
    {
        $portalCategoryModel = new PortalCategoryModel();
        $id                  = $this->request->param('id');
        //获取删除的内容
        $findCategory = $portalCategoryModel->where('id', $id)->find();

        if (empty($findCategory)) {
            $this->error('分类不存在!');
        }
//判断此分类有无子分类（不算被删除的子分类）
        $categoryChildrenCount = $portalCategoryModel->where(['parent_id' => $id,'delete_time' => 0])->count();

        if ($categoryChildrenCount > 0) {
            $this->error('此分类有子类无法删除!');
        }

        $categoryPostCount = Db::name('portal_category_post')->where('category_id', $id)->count();

        if ($categoryPostCount > 0) {
            $this->error('此分类有文章无法删除!');
        }

        $data   = [
            'object_id'   => $findCategory['id'],
            'create_time' => time(),
            'table_name'  => 'portal_category',
            'name'        => $findCategory['name']
        ];
        $result = $portalCategoryModel
            ->where('id', $id)
            ->update(['delete_time' => time()]);
        if ($result) {
            Db::name('recycleBin')->insert($data);
            $this->success('删除成功!');
        } else {
            $this->error('删除失败');
        }
    }

    /*
     * 文章列表
     */
    public function newsList()
    {
        $param = $this->request->param();

        $categoryId = $this->request->param('cid', $this->parentId, 'intval');
        $portalPostModel = new PortalPostModel();
        $portalCategoryModel = new PortalCategoryModel();

        $where = [
            'a.create_time' => ['>=', 0],
            'a.delete_time' => 0
        ];

        $join = [
            ['__USER__ u', 'a.user_id = u.id']
        ];

        $field = 'a.*,u.user_login,u.user_nickname,u.user_email';

        if (!empty($categoryId)) {
            if($categoryId==$this->parentId)
            {
                $categoryIds = $portalCategoryModel->where(['path'=>['Like','%'.$categoryId.'%']])->column('id');
                $where['b.category_id'] = ['in', trim(implode(',',$categoryIds),',')];
            }else{
                $where['b.category_id'] = ['eq', $categoryId];
            }
            array_push($join, [
                '__PORTAL_CATEGORY_POST__ b', 'a.id = b.post_id'
            ]);
            $field = 'a.*,b.id AS post_category_id,b.list_order,b.category_id,u.user_login,u.user_nickname,u.user_email';
        }

        $startTime = empty($param['start_time']) ? 0 : strtotime($param['start_time']);
        $endTime   = empty($param['end_time']) ? 0 : strtotime($param['end_time']);
        if (!empty($startTime) && !empty($endTime)) {
            $where['a.published_time'] = [['>= time', $startTime], ['<= time', $endTime]];
        } else {
            if (!empty($startTime)) {
                $where['a.published_time'] = ['>= time', $startTime];
            }
            if (!empty($endTime)) {
                $where['a.published_time'] = ['<= time', $endTime];
            }
        }

        $keyword = empty($param['keyword']) ? '' : $param['keyword'];
        if (!empty($keyword)) {
            $where['a.post_title'] = ['like', "%$keyword%"];
        }

        $where['a.post_type'] = 1;

        $articles        = $portalPostModel->alias('a')->field($field)
            ->join($join)
            ->where($where)
            ->order('published_time', 'DESC')
            ->paginate(10);
        $articles->appends($param);

//        $categoryTree        = $portalCategoryModel->adminCategoryTree($categoryId);

        $categories = $portalCategoryModel->order("list_order ASC")->where(['delete_time' => 0,'path'=>['Like','0-'.$this->parentId.'%']])->select()->toArray();
        $tree       = new Tree();
        $tree->icon = ['&nbsp;&nbsp;│', '&nbsp;&nbsp;├─', '&nbsp;&nbsp;└─'];
        $tree->nbsp = '&nbsp;&nbsp;';
        $newCategories = [];
        foreach ($categories as $item) {
            $item['selected'] = $categoryId == $item['id'] ? "selected" : "";
            array_push($newCategories, $item);
        }
        $tree->init($newCategories);
        $str     = '<option value=\"{$id}\" {$selected}>{$spacer}{$name}</option>';
        $treeStr = $tree->getTree(0, $str);
        $this->assign('categories_tree', $treeStr);

        $this->assign('start_time', isset($param['start_time']) ? $param['start_time'] : '');
        $this->assign('end_time', isset($param['end_time']) ? $param['end_time'] : '');
        $this->assign('keyword', isset($param['keyword']) ? $param['keyword'] : '');
        $this->assign('articles', $articles->items());
        $this->assign('category', $categoryId);
        $this->assign('page', $articles->render());

        return $this->fetch();
    }

    public function newAdd()
    {
        return $this->fetch();
    }

    public function newAddPost()
    {
        if ($this->request->isPost()) {
            $data   = $this->request->param();

            //状态只能设置默认值。未发布、未置顶、未推荐
            $data['post']['post_status'] = !empty($data['post']['post_status'])?1:0;
            $data['post']['is_top'] = !empty($data['post']['is_top'])?1:0;
            $data['post']['recommended'] = !empty($data['post']['recommended'])?1:0;

            $post   = $data['post'];
            $result = $this->validate($post, 'portal/AdminArticle');
            if ($result !== true) {
                $this->error($result);
            }

            $portalPostModel = new PortalPostModel();

            if (!empty($data['photo_names']) && !empty($data['photo_urls'])) {
                $data['post']['more']['photos'] = [];
                foreach ($data['photo_urls'] as $key => $url) {
                    $photoUrl = cmf_asset_relative_url($url);
                    array_push($data['post']['more']['photos'], ["url" => $photoUrl, "name" => $data['photo_names'][$key]]);
                }
            }

            if (!empty($data['file_names']) && !empty($data['file_urls'])) {
                $data['post']['more']['files'] = [];
                foreach ($data['file_urls'] as $key => $url) {
                    $fileUrl = cmf_asset_relative_url($url);
                    array_push($data['post']['more']['files'], ["url" => $fileUrl, "name" => $data['file_names'][$key]]);
                }
            }



            $portalPostModel->adminAddArticle($data['post'], $data['post']['categories']);

            $data['post']['id'] = $portalPostModel->id;
            $hookParam          = [
                'is_add'  => true,
                'article' => $data['post']
            ];
            hook('portal_admin_after_save_article', $hookParam);


            $this->success('添加成功!', url('News/newEdit', ['id' => $portalPostModel->id]));
        }

    }

    /*
     * 新闻编辑
     */
    public function newEdit()
    {
        $id = $this->request->param('id', 0, 'intval');

        $portalPostModel = new PortalPostModel();
        $post            = $portalPostModel->where('id', $id)->find();
        $postCategories  = $post->categories()->alias('a')->column('a.name', 'a.id');
        $postCategoryIds = implode(',', array_keys($postCategories));
        $this->assign('post', $post);
        $this->assign('post_categories', $postCategories);
        $this->assign('post_category_ids', $postCategoryIds);
        return $this->fetch();
    }

    /*
     * 新闻编辑保存
     */
    public function newEditPost()
    {
        if ($this->request->isPost()) {
            $data = $this->request->param();

            //需要抹除发布、置顶、推荐的修改。
            unset($data['post']['post_status']);
            unset($data['post']['is_top']);
            unset($data['post']['recommended']);

            $post = $data['post'];
            $result = $this->validate($post, 'portal/AdminArticle');
            if ($result !== true) {
                $this->error($result);
            }

            $portalPostModel = new PortalPostModel();

            if (!empty($data['photo_names']) && !empty($data['photo_urls'])) {
                $data['post']['more']['photos'] = [];
                foreach ($data['photo_urls'] as $key => $url) {
                    $photoUrl = cmf_asset_relative_url($url);
                    array_push($data['post']['more']['photos'], ["url" => $photoUrl, "name" => $data['photo_names'][$key]]);
                }
            }

            if (!empty($data['file_names']) && !empty($data['file_urls'])) {
                $data['post']['more']['files'] = [];
                foreach ($data['file_urls'] as $key => $url) {
                    $fileUrl = cmf_asset_relative_url($url);
                    array_push($data['post']['more']['files'], ["url" => $fileUrl, "name" => $data['file_names'][$key]]);
                }
            }

            $portalPostModel->adminEditArticle($data['post'], $data['post']['categories']);

            $hookParam = [
                'is_add' => false,
                'article' => $data['post']
            ];
            hook('portal_admin_after_save_article', $hookParam);

            $this->success('保存成功!');
        }
    }

    public function newDelete()
    {
        $AdminArticle = new AdminArticleController();
        $AdminArticle->delete();
    }


    public function select()
    {
        $ids = $this->request->param('ids');
        $selectedIds = explode(',', $ids);
        $portalCategoryModel = new PortalCategoryModel();

        $where = ['delete_time' => 0,'path'=>['Like','0-'.$this->parentId.'%']];
//        if (!empty($currentCid)) {
//            $where['id'] = ['neq', $currentCid];
//        }
        $categories = $portalCategoryModel->order("list_order ASC")->where($where)->select()->toArray();

        $tree = new Tree();
        $tree->icon = ['&nbsp;&nbsp;│', '&nbsp;&nbsp;├─', '&nbsp;&nbsp;└─'];
        $tree->nbsp = '&nbsp;&nbsp;';

        if (!is_array($selectedIds)) {
            $selectedIds = [$selectedIds];
        }

        $newCategories = [];
        foreach ($categories as $item) {
            $item['checked'] = in_array($item['id'], $selectedIds) ? "checked" : "";
            $item['url'] = cmf_url('Wap/News/newList', ['id' => $item['id']]);;
            array_push($newCategories, $item);
        }

        $tree->init($newCategories);

        $tpl = <<<tpl
<tr class='data-item-tr'>
    <td>
        <input type='checkbox' class='js-check' data-yid='js-check-y' data-xid='js-check-x' name='ids[]'
               value='\$id' data-name='\$name' \$checked>
    </td>
    <td>\$id</td>
    <td>\$spacer <a href='\$url' target='_blank'>\$name</a></td>
</tr>
tpl;
        $treeStr = $tree->getTree(0, $tpl);

        $where = ['delete_time' => 0];
        $categories = $portalCategoryModel->where($where)->select();

        $this->assign('categories', $categories);
        $this->assign('selectedIds', $selectedIds);
        $this->assign('categories_tree', $treeStr);
        return $this->fetch();
    }

    /*
     * banner编辑
     */
    public function bannerEdit()
    {
        $type = $this->request->param('type','news');
        $Banner = new BannerModel();
        $banner = $Banner->where(['type'=>$type])->find();
        $this->assign('post',$banner);
        return $this->fetch();
    }

    /*
     * banner编辑保存
     */
    public function bannerEditPost()
    {
        $rule = [
            'thumbnail' => 'require',
        ];
        $message = [
            'thumbnail.require' => '需要上传图片',
        ];
        $data = $this->request->param('post/a',[]);

        $data['list_order'] = $data['list_order']?$data['list_order']:100;
        $data['type'] = $data['type']?$data['type']:'news';
        $data['admin'] = session('name');
        $check_re = $this->validate($data,$rule,$message);
        if($check_re!==true) $this->error($check_re);
        $Banner = new BannerModel();
        $Banner->where(['type'=>$data['type']])->update($data);
        $this->success('保存成功');
    }

    /*
     * adv编辑
     */
    public function advEdit()
    {
        $this->assign('adv',cmf_get_option('news_adv'));
        return $this->fetch();
    }

    /*
     * adv编辑保存
     */
    public function advEditPost()
    {
        $adv = $this->request->param('adv/s','');
        if(cmf_set_option('news_adv',['news_adv'=>$adv]))
            $this->success('保存成功');
    }

    /*
     * 推荐版块
     */
    public function recommendBlock()
    {
        $portalPostModel = new PortalPostModel();
        $RecommendBlock = new RecommendBlockModel();
        $type = $this->request->param('type','');
        $this->assign('type',$type);
        if(empty($type)) $this->error('缺少关键参数');
        $type = $type=='list'?0:1;
        try{
            $list = $portalPostModel->alias('pp')
                ->field('pp.post_keywords,pp.id')
                ->join('__PORTAL_CATEGORY_POST__ pcp','pp.id=pcp.post_id')
                ->join('__PORTAL_CATEGORY__ pc','pc.id=pcp.category_id')
                ->where(['pp.delete_time'=>0,'pp.post_keywords'=>['neq',""],'pc.parent_id'=>11])
                ->select()->toArray();
            $recommendBlock = $RecommendBlock->where(['type'=>$type])->find();
        }catch(Exception $e){
            $this->error($e);
        }
        $result = [];
        foreach ($list as $k=>$v)
        {
            $post_keywords = explode(',',$v['post_keywords']);
            foreach ($post_keywords as $pkk=>$pkv)
            {
                $result[] = [$pkv=>"id"];
            }
        }
        foreach ($result as $rk=>$rv)
        {
            $result[$rk] = array_flip($rv);
            $result[$rk]['name'] = $result[$rk]['id'];
        }
        $selectedList=[];
        if(!empty($recommendBlock))
        {
            $sList = explode(',',$recommendBlock['recommended']);
            $sList = array_flip(array_flip($sList));
            foreach ($sList as $slk=>$slv)
            {
                $selectedList[]= ['name'=>$slv,'id'=>$slv];
            }
        }
        $this->assign('list',json_encode($result));
        $this->assign('selectedList',json_encode($selectedList));
        return $this->fetch();
    }

    /*
     * 推荐版块编辑保存
     */
    public function recommendBlockEditPost()
    {
        $rule = [
            'recommended' => 'require',
            'type' => 'require',
        ];
        $message = [
            'recommended.require' => '请选择推荐版块',
            'type.require' => '缺少关键参数',
        ];
        $data = $this->request->param('',[]);
        $check_re = $this->validate($data,$rule,$message);
        if($check_re!==true) $this->error($check_re);
        $data['recommended'] = implode(',',array_flip(array_flip(explode(',',$data['recommended']))));
        $data['type'] = $data['type']=='list'?0:1;
        $data['admin'] = session('name');
        $data['update_date'] = date('Y-m-d H:i:s');
        $RecommendBlockModel = new RecommendBlockModel();
        if($RecommendBlockModel->where(['type'=>$data['type']])->count())
        {
            $RecommendBlockModel->field('type,recommended,admin,more,id,update_date')->where(['type'=>$data['type']])->update($data);
        }else{
            $RecommendBlockModel->field('type,recommended,admin,more,id,update_date')->where(['type'=>$data['type']])->insert($data);
        }
        $this->success('保存成功');
    }

    /*
   * 热门课程二维码
   */
    public function hotClassRecode()
    {
        cache('cmf_options_hotClassRecode',null);
        $this->assign(cmf_get_option('hotClassRecode'));
        return $this->fetch();
    }

    /*
    * 热门课程二维码编辑保存
    */
    public function hotClassRecodeEditPost()
    {
        if(cmf_set_option('hotClassRecode',$this->request->param('','')))
        {
            $this->success('保存成功');
        }else{
            $this->error('保存失败');
        }
    }

    /*
    * 优秀的1对1教育品牌
    */
    public function footer()
    {
        $this->assign(cmf_get_option('footer'));
        return $this->fetch();
    }

    /*
    * 优秀的1对1教育品牌编辑保存
    */
    public function footerEditPost()
    {
        if(cmf_set_option('footer',$this->request->param('','')))
        {
            $this->success('保存成功');
        }else{
            $this->error('保存失败');
        }
    }
}