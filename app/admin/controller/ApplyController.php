<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/9/13 0013
 * Time: 下午 13:03
 */

namespace app\admin\controller;


use cmf\controller\AdminBaseController;
use app\admin\model\ApplyModel;
use app\admin\model\VacationModel;
use app\portal\model\PortalCategoryModel;
use tree\Tree;
use app\admin\model\RouteModel;
use think\Db;
class ApplyController extends AdminBaseController
{

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->parentId = 23;
    }

    public function index()
    {

        $portalCategoryModel = new PortalCategoryModel();
        $where = ['delete_time' => 0,'path'=>['Like','0-'.$this->parentId.'%']];
        $categories = $portalCategoryModel->order("list_order ASC")->where($where)->select()->toArray();

        $tree       = new Tree();
        $tree->icon = ['&nbsp;&nbsp;│', '&nbsp;&nbsp;├─', '&nbsp;&nbsp;└─'];
        $tree->nbsp = '&nbsp;&nbsp;';

        $newCategories = [];

        foreach ($categories as $item) {
            $item['url']     = url('Apply/index', ['cid' => $item['id']]);
            $item['src']     = empty($item['more']['src'])?'':$item['more']['src'];
            $item['str_action'] = (substr_count($item['path'],'-')>2?'':'<a href="' . url("Apply/add", ["parent_id" => $item['id']]) . '">添加课程</a>') .' <a href="' . url("Apply/edit", ["id" => $item['id']]) . '">' . lang('EDIT') . '</a>  <a class="js-ajax-delete" href="' . url("Apply/delete", ["id" => $item['id']]) . '">' . lang('DELETE') . '</a> ';
            array_push($newCategories, $item);
        }
        $tree->init($newCategories);

        $tpl = "<tr>
                    <td><input name='list_orders[\$id]' type='text' size='3' value='\$list_order' class='input-order'></td>
                    <td>\$id</td>
                    <td>\$spacer <a href='\$url'>\$name</a></td>
                    <td>\$src</td>
                    <td>\$str_action</td>
                </tr>";
        $treeStr = $tree->getTree($this->parentId, $tpl);

        $this->assign('category_tree', $treeStr);
        return $this->fetch();
    }

    /*
     * 关于我们模块添加
     */
    public function add()
    {
        $parent_id = $this->request->param('parent_id/d',$this->parentId);
        $portalCategoryModel = new PortalCategoryModel();
        $where = ['delete_time' => 0,'path'=>['Like','0-'.$this->parentId.'%']];
        $categories = $portalCategoryModel->order("list_order ASC")->where($where)->select()->toArray();
        $tree       = new Tree();
        $tree->icon = ['&nbsp;&nbsp;│', '&nbsp;&nbsp;├─', '&nbsp;&nbsp;└─'];
        $tree->nbsp = '&nbsp;&nbsp;';

        $newCategories = [];
        foreach ($categories as $item) {
            $item['selected'] = $parent_id == $item['id'] ? "selected" : "";
            array_push($newCategories, $item);
        }

        $tree->init($newCategories);
        $str     = '<option value=\"{$id}\" {$selected}>{$spacer}{$name}</option>';
        $treeStr = $tree->getTree(0, $str);
        $this->assign('categories_tree', $treeStr);
        $this->assign('parentId', $parent_id);
        return $this->fetch();
    }

    /*
     * 关于我们模块添加保存
     */
    public function addPost()
    {
        $portalCategoryModel = new PortalCategoryModel();

        $data = $this->request->param();
        $data['is_hot'] = isset($data['is_hot'])&&$data['is_hot']=='on'?1:0;
        $result = $this->validate($data, 'PortalCategory');

        if ($result !== true) {
            $this->error($result);
        }

        $result = $portalCategoryModel->addCategory($data);

        if ($result === false) {
            $this->error('添加失败!');
        }

        $this->success('添加成功!', url('Apply/index'));
    }

    /*
     * 关于我们模块编辑
     */
    public function edit()
    {
        $id = $this->request->param('id/d',0,'intval');
        if ($id > 0) {
            $category = PortalCategoryModel::get($id)->toArray();
            $portalCategoryModel = new PortalCategoryModel();
            $where = ['delete_time' => 0,'path'=>['Like','0-'.$this->parentId.'%']];
            $categories = $portalCategoryModel->order("list_order ASC")->where($where)->select()->toArray();
            $tree       = new Tree();
            $tree->icon = ['&nbsp;&nbsp;│', '&nbsp;&nbsp;├─', '&nbsp;&nbsp;└─'];
            $tree->nbsp = '&nbsp;&nbsp;';

            $newCategories = [];
            foreach ($categories as $item) {
                $item['selected'] = $category['parent_id'] == $item['id'] ? "selected" : "";
                array_push($newCategories, $item);
            }
            $routeModel = new RouteModel();
            $alias      = $routeModel->getUrl('', ['id' => $id]);

            $category['alias'] = $alias;
            $tree->init($newCategories);
            $str     = '<option value=\"{$id}\" {$selected}>{$spacer}{$name}</option>';
            $treeStr = $tree->getTree(0, $str);

            $this->assign($category);
            $this->assign('categories_tree', $treeStr);
            $this->assign('parentId', $this->parentId);
            return $this->fetch();
        } else {
            $this->error('操作错误!');
        }
    }

    /*
     * 关于我们模块编辑保存
     */
    public function editPost()
    {
        $data = $this->request->param();
        $data['is_hot'] = isset($data['is_hot'])&&$data['is_hot']=='on'?1:0;
        $result = $this->validate($data, 'PortalCategory');

        if ($result !== true) {
            $this->error($result);
        }

        $portalCategoryModel = new PortalCategoryModel();

        $result = $portalCategoryModel->editCategory($data);

        if ($result === false) {
            $this->error('保存失败!');
        }

        $this->success('保存成功!');
    }

    /*
     * 关于我们模块删除
     */
    public function delete()
    {
        $portalCategoryModel = new PortalCategoryModel();
        $id                  = $this->request->param('id');
        //获取删除的内容
        $findCategory = $portalCategoryModel->where('id', $id)->find();

        if (empty($findCategory)) {
            $this->error('分类不存在!');
        }
//判断此分类有无子分类（不算被删除的子分类）
        $categoryChildrenCount = $portalCategoryModel->where(['parent_id' => $id,'delete_time' => 0])->count();

        if ($categoryChildrenCount > 0) {
            $this->error('此分类有子类无法删除!');
        }

        $categoryPostCount = Db::name('portal_category_post')->where('category_id', $id)->count();

        if ($categoryPostCount > 0) {
            $this->error('此分类有文章无法删除!');
        }

        $data   = [
            'object_id'   => $findCategory['id'],
            'create_time' => time(),
            'table_name'  => 'portal_category',
            'name'        => $findCategory['name']
        ];
        $result = $portalCategoryModel
            ->where('id', $id)
            ->update(['delete_time' => time()]);
        if ($result) {
            Db::name('recycleBin')->insert($data);
            $this->success('删除成功!');
        } else {
            $this->error('删除失败');
        }
    }

    public function applyRecord()
    {
        $ApplyModel = new ApplyModel();
        $applyList = $ApplyModel->order('id DESC')->paginate(15);
        $this->assign('categories',$applyList);
        $this->assign('page',$applyList->render());
        return $this->fetch();
    }
    public function vacation()
    {
        $ApplyModel = new VacationModel();
        $applyList = $ApplyModel->order('id DESC')->paginate(15);
        $this->assign('categories',$applyList);
        $this->assign('page',$applyList->render());
        return $this->fetch();
    }
}